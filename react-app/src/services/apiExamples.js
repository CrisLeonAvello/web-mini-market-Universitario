/**
 * Archivo de prueba para demostrar el uso directo de la API FakeStore
 * Puedes ejecutar estos ejemplos directamente en la consola del navegador
 */

// 1. FETCH B√ÅSICO - El que mencionaste
console.log('üîÑ Ejecutando fetch b√°sico...');
fetch('https://fakestoreapi.com/products')
  .then(response => response.json())
  .then(data => {
    console.log('‚úÖ Productos obtenidos (fetch b√°sico):', data);
    console.log('üìä Total de productos:', data.length);
  })
  .catch(error => console.error('‚ùå Error:', error));

// 2. FETCH CON ASYNC/AWAIT (m√°s moderno)
async function fetchProductsModern() {
  try {
    console.log('üîÑ Ejecutando fetch con async/await...');
    const response = await fetch('https://fakestoreapi.com/products');
    const data = await response.json();
    
    console.log('‚úÖ Productos obtenidos (async/await):', data);
    console.log('üìä Total de productos:', data.length);
    
    // Mostrar el primer producto como ejemplo
    if (data.length > 0) {
      console.log('üõçÔ∏è Primer producto:', data[0]);
    }
    
    return data;
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

// 3. OTROS ENDPOINTS √öTILES
const API_EXAMPLES = {
  // Obtener todas las categor√≠as
  getCategories: () => {
    fetch('https://fakestoreapi.com/products/categories')
      .then(res => res.json())
      .then(data => console.log('üè∑Ô∏è Categor√≠as:', data));
  },
  
  // Obtener un producto espec√≠fico
  getProduct: (id = 1) => {
    fetch(`https://fakestoreapi.com/products/${id}`)
      .then(res => res.json())
      .then(data => console.log(`üõçÔ∏è Producto ${id}:`, data));
  },
  
  // Obtener productos por categor√≠a
  getByCategory: (category = 'electronics') => {
    fetch(`https://fakestoreapi.com/products/category/${category}`)
      .then(res => res.json())
      .then(data => console.log(`üì± Productos de ${category}:`, data));
  },
  
  // Obtener productos con l√≠mite
  getWithLimit: (limit = 5) => {
    fetch(`https://fakestoreapi.com/products?limit=${limit}`)
      .then(res => res.json())
      .then(data => console.log(`üî¢ Primeros ${limit} productos:`, data));
  },
  
  // Obtener productos ordenados
  getSorted: (sort = 'desc') => {
    fetch(`https://fakestoreapi.com/products?sort=${sort}`)
      .then(res => res.json())
      .then(data => console.log(`üìà Productos ordenados (${sort}):`, data));
  }
};

// 4. FUNCI√ìN PARA PROBAR TODOS LOS ENDPOINTS
async function testAllEndpoints() {
  console.log('üß™ Iniciando prueba completa de la API...');
  
  try {
    // Productos
    const products = await fetch('https://fakestoreapi.com/products').then(r => r.json());
    console.log('‚úÖ Productos:', products.length);
    
    // Categor√≠as
    const categories = await fetch('https://fakestoreapi.com/products/categories').then(r => r.json());
    console.log('‚úÖ Categor√≠as:', categories);
    
    // Producto espec√≠fico
    const product = await fetch('https://fakestoreapi.com/products/1').then(r => r.json());
    console.log('‚úÖ Producto 1:', product.title);
    
    console.log('üéâ Todas las pruebas completadas exitosamente!');
    
  } catch (error) {
    console.error('‚ùå Error en las pruebas:', error);
  }
}

// EXPORTAR PARA USO EN LA APLICACI√ìN
export {
  fetchProductsModern,
  API_EXAMPLES,
  testAllEndpoints
};

// INSTRUCCIONES PARA LA CONSOLA
console.log(`
üîß INSTRUCCIONES PARA PROBAR LA API:

1. Fetch b√°sico (tu ejemplo):
   fetch('https://fakestoreapi.com/products').then(r => r.json()).then(console.log)

2. Funci√≥n moderna:
   fetchProductsModern()

3. Probar categor√≠as:
   API_EXAMPLES.getCategories()

4. Probar producto espec√≠fico:
   API_EXAMPLES.getProduct(5)

5. Probar por categor√≠a:
   API_EXAMPLES.getByCategory('electronics')

6. Probar con l√≠mite:
   API_EXAMPLES.getWithLimit(3)

7. Probar todos los endpoints:
   testAllEndpoints()
`);

// Auto-ejecutar la funci√≥n moderna cuando se carga el archivo
// fetchProductsModern();